import React, { useState } from 'react';
import { useProcessFile } from './useProcessFile';
import './App.css';

const App: React.FC = () => {
  const { 
    isProcessing, 
    processedCount, 
    totalCount, 
    errorResults, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—à–∏–±–∫–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ [{ email, error }, ...]
    fileInputRef, 
    handleFileSelect, 
    handleDrop 
  } = useProcessFile();
  
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—á—Ç –∏ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const [credentials, setCredentials] = useState<{ email: string; password: string }[]>([]);

  const handleDownload = async () => {
    try {
      const response = await fetch('http://localhost:3000/api/export', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials)
      });
  
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error || `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.statusText}`);
      }
  
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
      const contentDisposition = response.headers.get('Content-Disposition');
      const match = contentDisposition?.match(/filename="?([^"]+)"?/);
      if (!match || !match[1]) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Content-Disposition');
      }
      const filename = match[1];
  
      // –ü–æ–ª—É—á–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
      const blob = await response.blob();
  
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', error);
      alert(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã email/–ø–∞—Ä–æ–ª—å
  const handleAddCredentials = () => {
    setCredentials([...credentials, { email: '', password: '' }]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleChangeCredentials = (index: number, field: 'email' | 'password', value: string) => {
    const updatedCredentials = [...credentials];
    updatedCredentials[index][field] = value;
    setCredentials(updatedCredentials);
  };

  return (
    <div
      className="app-container"
      onDragOver={(e) => e.preventDefault()}
      onDrop={handleDrop}
    >
      <h1 className="app-title">–ü–æ–ª—É—á–µ–Ω–∏–µ Ficto —Ç–æ–∫–µ–Ω–æ–≤</h1>

      <div className="form-container">
        {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
        <div style={{ marginBottom: '20px' }}>
          <label htmlFor="fileUpload" className="file-upload-label">
            –í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª:
          </label>
          <input
            id="fileUpload"
            type="file"
            accept=".xlsx, .xls"
            onChange={handleFileSelect}
            style={{ width: '100%' }}
            ref={fileInputRef}
          />
        </div>

        <button
          onClick={() => fileInputRef.current?.click()}
          disabled={isProcessing}
          className="action-button"
        >
          {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ uuid'}
        </button>

        {/* –°–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
        <div style={{ marginTop: '20px' }}>
          <button onClick={handleAddCredentials} className="action-button">
            –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
          </button>

          {credentials.map((cred, index) => (
            <div key={index} style={{ marginTop: '20px' }}>
              <label htmlFor={`emailInput_${index}`}>Email {index + 1}:</label>
              <input
                id={`emailInput_${index}`}
                type="email"
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                value={cred.email}
                onChange={(e) => handleChangeCredentials(index, 'email', e.target.value)}
                style={{ width: '100%', marginBottom: '10px' }}
              />
              <label htmlFor={`passwordInput_${index}`}>–ü–∞—Ä–æ–ª—å {index + 1}:</label>
              <input
                id={`passwordInput_${index}`}
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={cred.password}
                onChange={(e) => handleChangeCredentials(index, 'password', e.target.value)}
                style={{ width: '100%', marginBottom: '10px' }}
              />
            </div>
          ))}

          <button
            onClick={handleDownload}
            disabled={credentials.some((cred) => !cred.email || !cred.password)}
            className="action-button"
          >
            –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤—ã
          </button>
        </div>

        {isProcessing && (
          <div className="progress-container">
            <p>
              –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount} –∏–∑ {totalCount}
            </p>
            <div className="progress-bar">
              <div
                className="progress-bar-inner"
                style={{
                  width: `${totalCount ? (processedCount / totalCount) * 100 : 0}%`
                }}
              />
            </div>
          </div>
        )}
      </div>

      <div className="info-text">
        <p>
          –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º
        </p>
      </div>

      {/* –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ */}
      {errorResults.length > 0 && !isProcessing && (
        <div className="error-container">
          <p>–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</p>
          <ul>
            {errorResults.map((errObj, index) => (
              <li key={index}>
                {errObj.email || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π email)'}: {errObj.error}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default App;
