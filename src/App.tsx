import React, { useState } from 'react';
import { useProcessFile } from './useProcessFile';
import './App.css';

const App: React.FC = () => {
  const { isProcessing, processedCount, totalCount, errorEmails, fileInputRef, handleFileSelect, handleDrop } = useProcessFile();
  
  // –ù–æ–≤—ã–µ —Å—Ç–µ–π—Ç—ã –¥–ª—è email –∏ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞—Ä—Ö–∏–≤–∞
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleDownload = async () => {
    try {
      const response = await fetch('http://localhost:3000/api/exportAll', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }) // panel_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      });
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.statusText}`);
      }
      // –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤ –∫–∞–∫ Blob
      const blob = await response.blob();
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'export.zip';
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', error);
    }
  };

  return (
    <div
      className="app-container"
      onDragOver={(e) => e.preventDefault()}
      onDrop={handleDrop}
    >
      <h1 className="app-title">–ü–æ–ª—É—á–µ–Ω–∏–µ Ficto —Ç–æ–∫–µ–Ω–æ–≤</h1>

      <div className="form-container">
        {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) */}
        <div style={{ marginBottom: '20px' }}>
          <label htmlFor="fileUpload" className="file-upload-label">
            –í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª:
          </label>
          <input
            id="fileUpload"
            type="file"
            accept=".xlsx, .xls"
            onChange={handleFileSelect}
            style={{ width: '100%' }}
            ref={fileInputRef}
          />
        </div>

        <button
          onClick={() => fileInputRef.current?.click()}
          disabled={isProcessing}
          className="action-button"
        >
          {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ uuid'}
        </button>

        {/* –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ email –∏ –ø–∞—Ä–æ–ª—è */}
        <div style={{ marginTop: '20px' }}>
          <label htmlFor="emailInput">Email:</label>
          <input
            id="emailInput"
            type="email"
            placeholder="–í–≤–µ–¥–∏—Ç–µ email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            style={{ width: '100%', marginBottom: '10px' }}
          />
          <label htmlFor="passwordInput">–ü–∞—Ä–æ–ª—å:</label>
          <input
            id="passwordInput"
            type="password"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            style={{ width: '100%', marginBottom: '10px' }}
          />
          <button
            onClick={handleDownload}
            disabled={!email || !password}
            className="action-button"
          >
            –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å XLSX
          </button>
        </div>

        {isProcessing && (
          <div className="progress-container">
            <p>
              –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount} –∏–∑ {totalCount}
            </p>
            <div className="progress-bar">
              <div
                className="progress-bar-inner"
                style={{
                  width: `${totalCount ? (processedCount / totalCount) * 100 : 0}%`
                }}
              />
            </div>
          </div>
        )}
      </div>

      <div className="info-text">
        <p>
          –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏
          —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º
        </p>
      </div>

      {errorEmails.length > 0 && !isProcessing && (
        <div className="error-container">
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</p>
          <ul>
            {errorEmails.map((email) => (
              <li key={email}>{email || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π email)'}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default App;
